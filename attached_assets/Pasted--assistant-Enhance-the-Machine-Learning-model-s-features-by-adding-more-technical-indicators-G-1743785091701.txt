@assistant Enhance the Machine Learning model's features by adding more technical indicators.

**Goal:** Improve potential model accuracy by providing more market context (momentum, volatility).

**Files to Modify:**
1. `src/models/signal_model.py`
2. `src/train_model.py`
3. `src/ml_backtest.py`

**Instructions:**

1.  **Edit `src/models/signal_model.py`:**
    *   **Import:** Ensure `import pandas_ta as ta` exists.
    *   **Modify `engineer_features(df)`:**
        *   After the existing feature calculations (price changes, MA diff, RSI, ATR), add calculations for:
            *   Stochastic Oscillator (%K and %D, standard 14,3,3 periods): `df.ta.stoch(k=14, d=3, append=True)`
            *   MACD (standard 12,26,9 periods): `df.ta.macd(fast=12, slow=26, signal=9, append=True)`
        *   Ensure `df.dropna(inplace=True)` is called *after* adding these new indicators.
    *   **Update `FEATURE_COLUMNS`:** Add the exact column names generated by the new `ta` calls to the global `FEATURE_COLUMNS` list (e.g., `'STOCHk_14_3_3'`, `'STOCHd_14_3_3'`, `'MACD_12_26_9'`, `'MACDh_12_26_9'`, `'MACDs_12_26_9'`). Verify the exact names generated by `pandas-ta`.

2.  **Edit `src/train_model.py`:**
    *   **Verify Feature Usage:** Ensure the script calls the *updated* `engineer_features` function.
    *   **Verify Column Selection:** Ensure the line `X = df[FEATURE_COLUMNS]` uses the *updated* `FEATURE_COLUMNS` list (imported from `signal_model.py`).
    *   **Retrain:** The existing `RandomForestClassifier.fit()` call will automatically use the new features. No change needed there.
    *   **Save:** The script already saves the model and scaler. No change needed there.
    *   **Action:** Add logging after feature engineering to print `df[FEATURE_COLUMNS].head()` and `df[FEATURE_COLUMNS].isnull().sum()` to help verify features were calculated correctly before training.

3.  **Edit `src/ml_backtest.py`:**
    *   **Verify Feature Usage:** Ensure it calls the *updated* `engineer_features` function.
    *   **Verify Column Selection:** Ensure it uses the *updated* `FEATURE_COLUMNS` list when preparing `X` for scaling and prediction.
    *   **Action:** Add similar logging as in `train_model.py` after feature engineering (`feature_df[FEATURE_COLUMNS].head()`, `feature_df[FEATURE_COLUMNS].isnull().sum()`) for verification.

**Post-Execution:**
- run `python -u src/train_model.py` to retrain and save the model with new features.
- run `python -m src.ml_backtest` to evaluate the performance of the *newly trained* model.
- The live bot (`src/main.py`) should automatically use the new features/model on its next run after `signal_model.py` is updated.